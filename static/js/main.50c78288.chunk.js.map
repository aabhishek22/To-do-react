{"version":3,"sources":["logo.svg","listitem.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Listitem","props","listitem","items","map","item","className","key","type","id","value","text","icon","faEdit","onClick","e","setUpdate","target","deleteItem","duration","easing","library","add","faTrash","App","handleInput","o","setState","currentItem","Date","now","addItem","preventDefault","newitem","state","newitems","filteredItems","filter","onSubmit","this","placeholder","onChange","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6JAAAA,EAAOC,QAAU,IAA0B,kC,6MCyC5BC,EAnCE,SAACC,GACd,IACMC,EADQD,EAAME,MACCC,KAAI,SAAAC,GACrB,OAAO,yBAAKC,UAAU,OAAOC,IAAKF,EAAKE,KACnC,2BACI,2BACAC,KAAK,OAAOC,GAAIJ,EAAKE,IACpBG,MAAOL,EAAKM,OAGjB,8BACA,kBAAC,IAAD,CAAiBL,UAAU,UACtBM,KAAMC,IACNC,QAAS,SAACC,GAAD,OAAKd,EAAMe,UAAUD,EAAEE,OAAOP,MAAML,EAAKE,QAGnD,kBAAC,IAAD,CAAiBD,UAAU,UAC1BM,KAAK,QACLE,QAAS,kBAAIb,EAAMiB,WAAWb,EAAKE,cAOhD,OACQ,6BACJ,kBAAC,IAAD,CAAUY,SAAU,IAAKC,OAAO,eAC/BlB,K,KC1BTmB,EAAQC,IAAIC,K,IA0EGC,E,kDAvEb,WAAYvB,GAAO,IAAD,8BAChB,cAAMA,IAWRwB,YAAY,SAACC,GACX,EAAKC,SAAS,CACZC,YAAY,CACZjB,KAAKe,EAAET,OAAOP,MACdH,IAAIsB,KAAKC,UAhBK,EAqBlBC,QAAQ,SAAChB,GACPA,EAAEiB,iBACF,IAAMC,EAAQ,EAAKC,MAAMN,YACrB,GAAkB,KAAfK,EAAQtB,KAAU,CACvB,IAAMwB,EAAS,GAAD,mBAAK,EAAKD,MAAM/B,OAAhB,CAAsB8B,IACpC,EAAKN,SAAS,CACZxB,MAAMgC,EACNP,YAAY,CACVjB,KAAK,GACLJ,IAAI,QA9BM,EAmClBW,WAAW,SAACX,GACV,IAAM6B,EAAc,EAAKF,MAAM/B,MAAMkC,QAAO,SAAAlC,GAAK,OAC/CA,EAAMI,MAAMA,KACZ,EAAKoB,SAAS,CAACxB,MAAMiC,KAtCP,EAwClBpB,UAAU,SAACL,EAAKJ,GACd,IAAMJ,EAAM,EAAK+B,MAAM/B,MACvBA,EAAMC,KAAI,SAAAC,GACLA,EAAKE,MAAMA,IACZF,EAAKM,KAAKA,MAGd,EAAKgB,SAAS,CAACxB,MAAMA,KA7CnB,EAAK+B,MAAM,CACT/B,MAAM,GACNyB,YAAY,CACVjB,KAAK,GACLJ,IAAI,KANM,E,qDAmDhB,OACE,yBAAKD,UAAU,OACb,gCACA,0BAAMG,GAAG,aAAa6B,SAAUC,KAAKR,SACnC,2BAAOvB,KAAK,OAAOgC,YAAY,cAC/B9B,MAAO6B,KAAKL,MAAMN,YAAYjB,KAC9B8B,SAAUF,KAAKd,cAEf,4BAAQjB,KAAK,UAAb,SAGJ,kBAAC,EAAD,CAAUL,MAAOoC,KAAKL,MAAM/B,MAC5Be,WAAYqB,KAAKrB,WACjBF,UAAWuB,KAAKvB,iB,GAjEJ0B,aCEEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.50c78288.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport './listitem.css';\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\r\nimport FlipMove from 'react-flip-move';\r\nimport { faEdit } from '@fortawesome/free-solid-svg-icons';\r\n\r\nconst Listitem = (props) => {\r\n    const items = props.items;\r\n    const listitem=items.map(item =>{\r\n        return <div className=\"list\" key={item.key}>\r\n            <p>\r\n                <input \r\n                type=\"text\" id={item.key}\r\n                 value={item.text} \r\n                \r\n                />\r\n            <span>\r\n            <FontAwesomeIcon className=\"faicons\"\r\n                 icon={faEdit}\r\n                 onClick={(e)=>props.setUpdate(e.target.value,item.key)}\r\n                 />\r\n\r\n                <FontAwesomeIcon className=\"faicons\"\r\n                 icon=\"trash\"\r\n                 onClick={()=>props.deleteItem(item.key)}\r\n                 />\r\n                \r\n            </span>\r\n            </p>\r\n            </div>\r\n    } )\r\n    return (\r\n            <div>\r\n        <FlipMove duration={200} easing=\"ease-in-out\">\r\n        {listitem}\r\n        </FlipMove>\r\n            </div> \r\n    \r\n    )\r\n}\r\n \r\nexport default Listitem;\r\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Listitem from './listitem'\nimport {library} from '@fortawesome/fontawesome-svg-core';\nimport {faTrash,faEdit} from '@fortawesome/free-solid-svg-icons';\n\n\nlibrary.add(faTrash);\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n      this.state={\n        items:[],\n        currentItem:{\n          text:'',\n          key:''\n        }\n      }\n       \n  }\n  \n  handleInput=(o)=>{\n    this.setState({\n      currentItem:{\n      text:o.target.value,\n      key:Date.now()\n    }\n  })\n  }\n   \n  addItem=(e)=>{\n    e.preventDefault();\n    const newitem=this.state.currentItem;\n        if(newitem.text!==\"\"){\n      const newitems=[...this.state.items,newitem ];\n      this.setState({\n        items:newitems,\n        currentItem:{\n          text:'',\n          key:''\n        }\n      })\n    }\n  }\n  deleteItem=(key)=>{\n    const filteredItems=this.state.items.filter(items=>\n      items.key!==key);\n      this.setState({items:filteredItems})\n  }\n  setUpdate=(text,key)=>{\n    const items=this.state.items;\n    items.map(item=>{\n      if(item.key===key){\n        item.text=text;\n      }\n    })\n    this.setState({items:items})\n  }\n  \n  render() { \n    return ( \n      <div className=\"App\"> \n        <header>\n        <form id=\"to-do-form\" onSubmit={this.addItem} > \n          <input type=\"text\" placeholder=\"enter text \"\n          value={this.state.currentItem.text}\n          onChange={this.handleInput}\n          />\n          <button type=\"submit\">Add</button>\n        </form>\n      </header>\n      <Listitem items={this.state.items}\n      deleteItem={this.deleteItem}\n      setUpdate={this.setUpdate}\n      />\n      </div>\n     );\n  }\n}\n \nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}